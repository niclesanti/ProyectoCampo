@startuml DiagramaDeClasesUML

' DEFINICION DE CLASES DEL MODELO
class Usuario {
  - id: Long
  - nombre: String
  - email: String
  - fotoPerfil: String
  - proveedor: ProveedorAutenticacion
  - idProveedor: String
  - rol: String
  - activo: Boolean
  - fechaRegistro: LocalDateTime
  - fechaUltimoAcceso: LocalDateTime
}

class EspacioTrabajo {
  - id: Long
  - nombre: String
  - saldo: Float
}

class CuentaBancaria {
  - id: Long
  - nombre: String
  - entidadFinanciera: String
  - saldoActual: Float
}

class Transaccion {
  - id: Long
  - tipo: TipoTransaccion
  - monto: Float
  - fecha: LocalDate
  - descripcion: String
  - nombreCompletoAuditoria: String
  - fechaCreacion: LocalDateTime
}

class MotivoTransaccion {
  - id: Long
  - motivo: String
}

class ContactoTransferencia {
  - id: Long
  - nombre: String
}

class Presupuesto {
    - id: Long
    - monto: Float
    - periodoInicio: LocalDateTime
    - periodoFin: LocalDateTime
    - umbralAlerta: Float
}

enum TipoTransaccion {
  INGRESO
  GASTO
}

enum ProveedorAutenticacion {
  GOOGLE
  FACEBOOK
  GITHUB
}

' ASOCIACIONES DE CLASES DE MODELO
Usuario "1" -- "0..*" EspacioTrabajo : "es admin de"
Usuario "0..*" -- "0..*" EspacioTrabajo : "participa en"
EspacioTrabajo "1" -- "0..*" CuentaBancaria : "tiene"
EspacioTrabajo "1" -- "0..*" Transaccion : "registra"
EspacioTrabajo "1" -- "0..*" MotivoTransaccion : "define"
EspacioTrabajo "1" -- "0..*" ContactoTransferencia : "registra"
EspacioTrabajo "1" -- "0..*" Presupuesto : "asigna"

Transaccion "0..*" -- "1" MotivoTransaccion : "tiene un"
Transaccion "0..*" -- "0..1" ContactoTransferencia : "asociada a un"
Transaccion "0..*" -- "0..1" CuentaBancaria : "afecta a"

Presupuesto "1" -- "0..1" MotivoTransaccion : "relacionado con"


' DEFINICION DE CONTROLADORES

interface EspacioTrabajoController <<controller>> {
    + registrarEspacioTrabajo(): ResponseEntity<Void>
    + compartirEspacioTrabajo(): ResponseEntity<Void>
    + listarEspaciosTrabajoPorUsuario(): ResponseEntity<List<EspacioTrabajoListadoDTO>>
}

interface CuentaBancariaController <<controller>> {
    + crearCuentaBancaria(): ResponseEntity<Void>
    + listarCuentasBancarias(): ResponseEntity<List<CuentaBancariaListadoDTO>>
    + realizarTransaccion(): ResponseEntity<Void>
}

interface TransaccionController <<controller>> {
    + registrarTransaccion(): ResponseEntity<TransaccionDTO>
    + removerTransaccion(): ResponseEntity<Void>
    + buscarTransaccion(): ResponseEntity<List<TransaccionListadoDTO>>
    + registrarContactoTransferencia(): ResponseEntity<ContactoDTO>
    + listarContactos(): ResponseEntity<List<ContactoListadoDTO>>
    + nuevoMotivoTransaccion(): ResponseEntity<MotivoDTO>
    + listarMotivos(): ResponseEntity<List<MotivoListadoDTO>>
    + buscarTransaccionesRecientes(): ResponseEntity<List<TransaccionListadoDTO>>
    + obtenerDashboardInfo(): ResponseEntity<DashboardInfoDTO>
}

' DEFINICION DE SERVICIOS
interface EspacioTrabajoService <<service>> {
    + registrarEspacioTrabajo(): void
    + compartirEspacioTrabajo(): void
    + listarEspaciosTrabajoPorUsuario(): List<EspacioTrabajoListadoDTO>
}
class EspacioTrabajoServiceImpl <<service>>

interface CuentaBancariaService <<service>> {
    + crearCuentaBancaria(): void
    + actualizarCuentaBancaria(): CuentaBancaria
    + listarCuentasBancarias(): List<CuentaBancariaListadoDTO>
    + transaccionEntreCuentas(): void
}
class CuentaBancariaServiceImpl <<service>>

interface TransaccionService <<service>> {
    + registrarTransaccion(): TransaccionDTO
    + removerTransaccion(): void
    + buscarTransaccion(): List<TransaccionListadoDTO>
    + registrarContactoTransferencia(): ContactoDTO
    + nuevoMotivoTransaccion(): MotivoDTO
    + listarContactos(): List<ContactoListadoDTO>
    + listarMotivos(): List<MotivoListadoDTO>
    + buscarTransaccionesRecientes(): List<TransaccionListadoDTO>
    + obtenerDashboardInfo(): DashboardInfoDTO
}
class TransaccionServiceImpl <<service>>

' DEFINICION DE REPOSITORIOS
interface UsuarioRepository <<repository>>
interface EspacioTrabajoRepository <<repository>>
interface CuentaBancariaRepository <<repository>>
interface TransaccionRepository <<repository>>
interface MotivoTransaccionRepository <<repository>>
interface ContactoTransferenciaRepository <<repository>>
interface DashboardRepository <<repository>>

' ASOCIACIONES CAPA PRESENTACION -> SERVICIO
EspacioTrabajoController ..> EspacioTrabajoService
CuentaBancariaController ..> CuentaBancariaService
TransaccionController ..> TransaccionService

' ASOCIACIONES CAPA SERVICIO (IMPLEMENTACIONES)
EspacioTrabajoServiceImpl ..|> EspacioTrabajoService
CuentaBancariaServiceImpl ..|> CuentaBancariaService
TransaccionServiceImpl ..|> TransaccionService

' ASOCIACIONES CAPA SERVICIO -> REPOSITORIO
EspacioTrabajoServiceImpl ..> EspacioTrabajoRepository
EspacioTrabajoServiceImpl ..> UsuarioRepository
CuentaBancariaServiceImpl ..> CuentaBancariaRepository
CuentaBancariaServiceImpl ..> EspacioTrabajoRepository
TransaccionServiceImpl ..> TransaccionRepository
TransaccionServiceImpl ..> EspacioTrabajoRepository
TransaccionServiceImpl ..> MotivoTransaccionRepository
TransaccionServiceImpl ..> ContactoTransferenciaRepository
TransaccionServiceImpl ..> DashboardRepository
TransaccionServiceImpl ..> CuentaBancariaRepository
TransaccionServiceImpl ..> CuentaBancariaService

' ASOCIACIONES CAPA REPOSITORIO -> MODELO
UsuarioRepository ..> Usuario
EspacioTrabajoRepository ..> EspacioTrabajo
CuentaBancariaRepository ..> CuentaBancaria
TransaccionRepository ..> Transaccion
MotivoTransaccionRepository ..> MotivoTransaccion
ContactoTransferenciaRepository ..> ContactoTransferencia

' ASOCIACIONES CAPA SERVICIO -> MODELO
EspacioTrabajoService ..> EspacioTrabajo
CuentaBancariaService ..> CuentaBancaria
TransaccionService ..> Transaccion

@enduml